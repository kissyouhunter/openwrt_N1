name: packit new immortalwrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
      set_54x:
        description: "KERNEL: 5.4.x / none"
        required: false
        default: "none"
      set_510x:
        description: "KERNEL: 5.10.x / none"
        required: false
        default: "none"
      set_515x:
        description: "KERNEL: 5.15.x / none"
        required: false
        default: "none"
      set_61x:
        description: "KERNEL: 6.1.x / none"
        required: false
        default: "none"
      set_66x:
        description: "KERNEL: 6.6.x / none"
        required: false
        default: "none"
      set_ver:
        description: "VER: 25.01.01 / ..."
        required: false
        default: "25.01.01"
      upload_firmware:
        description: "whether to upload firmware."
        required: false
        default: "true"
      release_firmware:
        description: "whether to release firmware."
        required: false
        default: "true"
      upload_rclone:
        description: "whether to upload to OneDrive."
        required: false
        default: "false"

env:
  REPO_URL: https://github.com/unifreq/openwrt_packit
  REPO_BRANCH: master
  ROOTFS_URL: https://github.com/kissyouhunter/openwrt_immortalwrt/releases/download/rootfs/immortalwrt-armsr-armv8-generic-rootfs.tar.gz
  KERNEL_URL: https://github.com/kissyouhunter/Openwrt_X86-Openwrt_N1-Armbian_N1/releases/download/kernel_stable
  UPLOAD_BIN_DIR: false
  SERVERCHAN_SCKEY: true
  TZ: Asia/Shanghai

concurrency:
  group: "packit"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      OP_DATE: ${{ github.event.inputs.set_ver }}
      UPLOAD_FIRMWARE: ${{ github.event.inputs.upload_firmware }}
      RELEASE_FIRMWARE: ${{ github.event.inputs.release_firmware }}
      UPLOAD_RCLONE: ${{ github.event.inputs.upload_rclone }}
    steps:
      - name: Telegram Bot (pre-build notification)
        run: |
          # Gather CPU info and send notification if SERVERCHAN_SCKEY is true
          cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c > CPU
          cat /proc/cpuinfo | grep "cpu cores" | uniq >> CPU
          sed -i 's|[[:space:]]||g; s|^.||' CPU && sed -i 's|CPU||g; s|pucores:||' CPU
          CPUNAME="$(awk 'NR==1' CPU)"
          CPUCORES="$(awk 'NR==2' CPU)"
          rm -rf CPU
          if [[ "${SERVERCHAN_SCKEY}" == "true" ]]; then
            curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=🎉 主人：您正在使用kissyouhunter仓库打包的机器[ ${CPUNAME} 核心数: ${CPUCORES} 线程: $(nproc) ]" https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage
          fi

      - name: Checkout
        uses: actions/checkout@v4

      - name: Installing Requirements & Cleaning Docker Images
        run: |
          # Clear dangling docker images to free up space
          docker rmi $(docker images -q) || true
          sudo -E apt-get update
          sudo -E apt-get install subversion -y
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean

      - name: Check Space Usage
        if: (!cancelled())
        run: df -hT

      - name: Download Openwrt_Packit
        id: packit
        run: |
          git clone "$REPO_URL" -b "$REPO_BRANCH" /tmp/packit
          sed -i 's|50000|25000|g' /tmp/packit/files/cpustat
          cd /tmp/packit
          curl -LO "$ROOTFS_URL"
          mv immortalwrt-armsr-armv8-generic-rootfs.tar.gz  openwrt-armvirt-64-generic-rootfs.tar.gz 
          cp $GITHUB_WORKSPACE/mk_s905d_n1-docker.sh mk_s905d_n1-docker.sh -v
          cd /tmp/packit/files
          rm -f ./index.html.patches/luci-admin-status-index-html.patch
          cp $GITHUB_WORKSPACE/diy/n1_lede/index/luci-admin-status-index-html.patch ./index.html.patches/luci-admin-status-index-html.patch -v
          rm -f amlogic_model_database.txt
          cp $GITHUB_WORKSPACE/amlogic_model_database.txt amlogic_model_database.txt -v
          rm -f openwrt-install-amlogic
          cp $GITHUB_WORKSPACE/openwrt-install-amlogic openwrt-install-amlogic -v

      - name: Pack OpenWrt
        id: pack
        env:
          SET_54X: ${{ github.event.inputs.set_54x }}
          SET_510X: ${{ github.event.inputs.set_510x }}
          SET_515X: ${{ github.event.inputs.set_515x }}
          SET_61X: ${{ github.event.inputs.set_61x }}
          SET_66X: ${{ github.event.inputs.set_66x }}
        run: |
          # Define an associative array mapping input keys to kernel names
          declare -A kernels
          kernels=( ["set_54x"]="5.4" ["set_510x"]="5.10" ["set_515x"]="5.15" ["set_61x"]="6.1" ["set_66x"]="6.6" )

          # Iterate over each kernel option provided in inputs
          for key in "${!kernels[@]}"; do
            # 将变量名中的 'x' 转为大写 'X' 以匹配 env 中的定义
            var_name="SET_$(echo "${key#set_}" | tr '[:lower:]' '[:upper:]')"
            kernel_input=$(printenv "$var_name")
            kernel_ver="${kernels[$key]}"
            artifact_var="OP_${key#set_}"
            if [ "$kernel_input" = "none" ] || [ -z "$kernel_input" ]; then
              echo "no kernel was chosen for version ${kernel_ver}"
              echo "${artifact_var}=none" >> $GITHUB_ENV
            else
              echo "Processing kernel version ${kernel_input} for ${kernel_ver}"
              cd /tmp/packit
              curl -LO "$KERNEL_URL/${kernel_input}.tar.gz"
              tar -xzf "${kernel_input}.tar.gz"
              mv ./"${kernel_input}"/*kissyouhunter.tar.gz ./
              rm -rf "${kernel_input}.tar.gz" "${kernel_input}"
              rm -f make.env
              cp "$GITHUB_WORKSPACE/make_kernel.env" make.env -v
              # Replace op-kissyouhunter with kernel-specific tag and update the date/tag in make.env
              sed -i 's|op-kissyouhunter|'${kernel_input}'-kissyouhunter|g' make.env
              sed -i 's|date|'${OP_DATE}'|g' make.env
              sudo bash mk_s905d_n1-docker.sh
              echo "${artifact_var}=openwrt_s905d_n1_R${OP_DATE}_k${kernel_input}-kissyouhunter.img.gz" >> $GITHUB_ENV
            fi
          done
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Organize Files
        id: organize
        if: steps.pack.outputs.status == 'success' && !cancelled()
        run: |
          cd /tmp/packit/output
          sudo gzip -9 *
          sudo chmod 777 * .
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload Firmware Artifacts
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd "$FIRMWARE"
          for key in set_54x set_510x set_515x set_61x set_66x; do
            artifact_name_var="OP_${key#set_}"
            artifact_name=$(printenv "${artifact_name_var}")
            if [ "$artifact_name" != "none" ]; then
              echo "Uploading artifact: $artifact_name"
              sudo mkdir -p artifacts
              cp "$artifact_name" artifacts/
              sudo chmod -R 777 artifacts
            fi
          done

      - name: Artifact Upload
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        uses: actions/upload-artifact@master
        with:
          name: Firmware_Images
          path: ${{ env.FIRMWARE }}/*.gz

      - name: Upload Firmware to Release
        if: steps.organize.outputs.status == 'success' && env.RELEASE_FIRMWARE == 'true' && !cancelled()
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.REPO_TOKEN }}
          name: Openwrt_N1_without_docker
          tag: n1_openwrt
          commit: main
          allowUpdates: true
          repo: Openwrt_X86-Openwrt_N1-Armbian_N1
          body: |
            ## Openwrt_N1:

            * IP: 192.168.2.4 ID: root Password: password

            * 刷入emmc命令： install

            * adguardhome已内置好DNS和广告过滤，下载好核心后开启即可。

            * adguardhome ID: root Password: password wifi password: password

            * N1固件不带docker,请用一键脚本自行安装。

            * （一键脚本： bash <(curl -s -S -L https://git.io/JMl6C) 或者 curl -Lo ./kiss.sh https://git.io/JMl6C && bash kiss.sh）

            ### 升级方式一：
            * 一键升级命令:（最新的固件已支持在U盘运行的openwrt）
            * 如已刷入本固件，ssh连接n1或ttyd输入update即可。
            * 命令一：bash <(curl -Lso- nb0.cc/k)
            * 命令二：bash <(curl -s -S -L https://git.io/update-N1)
            * 建议确保/mnt/mmcblk2p4/或/mnt/sda4分区剩余空间至少1G，使用df -h查看分区情况

            ### 升级方式二：
            * 若需升级emmc内固件，请使用releases中的update-amlogic-openwrt.sh脚本
            * 将update-amlogic-openwrt.sh与img文件上传至/mnt/mmcblk2p4分区
            * SSH连接后执行：
              cd /mnt/mmcblk2p4/ && chmod 755 update-N1-openwrt.sh
              ./update-N1-openwrt.sh 文件名.img

            [注：三分区版本的N1只能写入固件到emmc，无法直接升级固件]
          artifacts: ${{ env.FIRMWARE }}/*.gz

      - name: Setup Rclone
        uses: AnimMouse/setup-rclone@v1
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_RCLONE == 'true' && !cancelled()
        with:
          rclone_config: ${{ secrets.RCLONE_CONFIG }}

      - name: Upload to OneDrive
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_RCLONE == 'true' && !cancelled()
        run: |
          cd /tmp/packit/
          sudo chmod -R 777 .
          rclone -v move output kiss_blockads:onedrive/OPENWRT/N1_OP

      - name: Notify on failure
        if: ${{ failure() }}
        run: |
          curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=我亲爱的😭主人😭：您使用kissyouhunter仓库打包的固件构建失败，请检查日志！" https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage

      - name: Telegram Bot (post-build notification)
        run: |
          if [[ "${SERVERCHAN_SCKEY}" == "true" ]]; then
            curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=我亲爱的✨主人✨：打包完成！固件版本: ${OP_DATE} ，请查收构建产物" https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage
          fi
