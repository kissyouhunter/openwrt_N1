name: packit new

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      config_rootfs:
        description: "Select rootfs type"
        required: true
        default: "without docker"
        type: choice
        options:
          - with docker
          - without docker
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
      set_54x:
        description: "KERNEL: 5.4.x / none"
        required: false
        default: "none"
      set_510x:
        description: "KERNEL: 5.10.x / none"
        required: false
        default: "none"
      set_515x:
        description: "KERNEL: 5.15.x / none"
        required: false
        default: "none"
      set_61x:
        description: "KERNEL: 6.1.x / none"
        required: false
        default: "none"
      set_66x:
        description: "KERNEL: 6.6.x / none"
        required: false
        default: "none"
      set_ver:
        description: "VER: 25.01.01 / ..."
        required: false
        default: "25.01.01"
      upload_firmware:
        description: "whether to upload firmware."
        required: false
        default: "true"
      release_firmware:
        description: "whether to release firmware."
        required: false
        default: "true"
      upload_rclone:
        description: "whether to upload to OneDrive."
        required: false
        default: "false"

env:
  REPO_URL: https://github.com/unifreq/openwrt_packit
  REPO_BRANCH: master
  KERNEL_URL: https://github.com/kissyouhunter/Openwrt_X86-Openwrt_N1-Armbian_N1/releases/download/kernel_stable
  UPLOAD_BIN_DIR: false
  SERVERCHAN_SCKEY: true
  TZ: Asia/Shanghai

concurrency:
  group: "packit"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      OP_DATE: ${{ github.event.inputs.set_ver }}
      UPLOAD_FIRMWARE: ${{ github.event.inputs.upload_firmware }}
      RELEASE_FIRMWARE: ${{ github.event.inputs.release_firmware }}
      UPLOAD_RCLONE: ${{ github.event.inputs.upload_rclone }}
    steps:
      - name: Set rootfs type and URLs
        run: |
          if [[ "${{ github.event.inputs.config_rootfs }}" == "with docker" ]]; then
            echo "ROOTFS_URL=https://github.com/kissyouhunter/openwrt_immortalwrt/releases/download/rootfs_with_docker/immortalwrt-armsr-armv8-generic-rootfs.tar.gz" >> $GITHUB_ENV
            echo "RELEASE_NAME=Openwrt_N1_with_docker" >> $GITHUB_ENV
            echo "RELEASE_TAG=openwrt_n1" >> $GITHUB_ENV
            echo "RELEASE_BODY=## Openwrt_N1 (with Docker):\n\n* IP: 192.168.2.4 ID: root Password: password\n* Âà∑ÂÖ•emmcÂëΩ‰ª§Ôºö install\n* adguardhome ID: root Password: password wifi password: password\n* N1Âõ∫‰ª∂Â∏¶Êúâdocker„ÄÇ\n* Ôºà‰∏ÄÈîÆËÑöÊú¨Ôºö bash <(curl -s -S -L https://git.io/JMl6C) ÊàñËÄÖ curl -Lo ./kiss.sh https://git.io/JMl6C && bash kiss.shÔºâ\n\n### ÂçáÁ∫ßÊñπÂºè‰∏ÄÔºö\n* ‰∏ÄÈîÆÂçáÁ∫ßÂëΩ‰ª§:ÔºàÊúÄÊñ∞ÁöÑÂõ∫‰ª∂Â∑≤ÊîØÊåÅÂú®UÁõòËøêË°åÁöÑopenwrtÔºâ\n* Â¶ÇÂ∑≤Âà∑ÂÖ•Êú¨Âõ∫‰ª∂ÔºåsshËøûÊé•n1ÊàñttydËæìÂÖ•updateÂç≥ÂèØ„ÄÇ\n* ÂëΩ‰ª§‰∏ÄÔºöbash <(curl -Lso- sg0.cc/k)\n* ÂëΩ‰ª§‰∫åÔºöbash <(curl -s -S -L https://git.io/update-N1)\n* Âª∫ËÆÆÁ°Æ‰øù/mnt/mmcblk2p4/Êàñ/mnt/sda4ÂàÜÂå∫Ââ©‰ΩôÁ©∫Èó¥Ëá≥Â∞ë1GÔºå‰ΩøÁî®df -hÊü•ÁúãÂàÜÂå∫ÊÉÖÂÜµ\n\n### ÂçáÁ∫ßÊñπÂºè‰∫åÔºö\n* Ëã•ÈúÄÂçáÁ∫ßemmcÂÜÖÂõ∫‰ª∂ÔºåËØ∑‰ΩøÁî®releases‰∏≠ÁöÑupdate-amlogic-openwrt.shËÑöÊú¨\n* Â∞Üupdate-amlogic-openwrt.sh‰∏éimgÊñá‰ª∂‰∏ä‰º†Ëá≥/mnt/mmcblk2p4ÂàÜÂå∫\n* SSHËøûÊé•ÂêéÊâßË°åÔºö\n  cd /mnt/mmcblk2p4/ && chmod 755 update-N1-openwrt.sh\n  ./update-N1-openwrt.sh Êñá‰ª∂Âêç.img\n\n[Ê≥®Ôºö‰∏âÂàÜÂå∫ÁâàÊú¨ÁöÑN1Âè™ËÉΩÂÜôÂÖ•Âõ∫‰ª∂Âà∞emmcÔºåÊó†Ê≥ïÁõ¥Êé•ÂçáÁ∫ßÂõ∫‰ª∂]" >> $GITHUB_ENV
          else
            echo "ROOTFS_URL=https://github.com/kissyouhunter/openwrt_N1/releases/download/rootfs/openwrt-armvirt-64-generic-rootfs.tar.gz" >> $GITHUB_ENV
            echo "RELEASE_NAME=Openwrt_N1_without_docker" >> $GITHUB_ENV
            echo "RELEASE_TAG=n1_openwrt" >> $GITHUB_ENV
            echo "RELEASE_BODY=## Openwrt_N1:\n\n* IP: 192.168.2.4 ID: root Password: password\n* Âà∑ÂÖ•emmcÂëΩ‰ª§Ôºö install\n* adguardhome ID: root Password: password wifi password: password\n* N1Âõ∫‰ª∂‰∏çÂ∏¶docker„ÄÇ\n* Ôºà‰∏ÄÈîÆËÑöÊú¨Ôºö bash <(curl -s -S -L https://git.io/JMl6C) ÊàñËÄÖ curl -Lo ./kiss.sh https://git.io/JMl6C && bash kiss.shÔºâ\n\n### ÂçáÁ∫ßÊñπÂºè‰∏ÄÔºö\n* ‰∏ÄÈîÆÂçáÁ∫ßÂëΩ‰ª§:ÔºàÊúÄÊñ∞ÁöÑÂõ∫‰ª∂Â∑≤ÊîØÊåÅÂú®UÁõòËøêË°åÁöÑopenwrtÔºâ\n* Â¶ÇÂ∑≤Âà∑ÂÖ•Êú¨Âõ∫‰ª∂ÔºåsshËøûÊé•n1ÊàñttydËæìÂÖ•updateÂç≥ÂèØ„ÄÇ\n* ÂëΩ‰ª§‰∏ÄÔºöbash <(curl -Lso- sg0.cc/k)\n* ÂëΩ‰ª§‰∫åÔºöbash <(curl -s -S -L https://git.io/update-N1)\n* Âª∫ËÆÆÁ°Æ‰øù/mnt/mmcblk2p4/Êàñ/mnt/sda4ÂàÜÂå∫Ââ©‰ΩôÁ©∫Èó¥Ëá≥Â∞ë1GÔºå‰ΩøÁî®df -hÊü•ÁúãÂàÜÂå∫ÊÉÖÂÜµ\n\n### ÂçáÁ∫ßÊñπÂºè‰∫åÔºö\n* Ëã•ÈúÄÂçáÁ∫ßemmcÂÜÖÂõ∫‰ª∂ÔºåËØ∑‰ΩøÁî®releases‰∏≠ÁöÑupdate-amlogic-openwrt.shËÑöÊú¨\n* Â∞Üupdate-amlogic-openwrt.sh‰∏éimgÊñá‰ª∂‰∏ä‰º†Ëá≥/mnt/mmcblk2p4ÂàÜÂå∫\n* SSHËøûÊé•ÂêéÊâßË°åÔºö\n  cd /mnt/mmcblk2p4/ && chmod 755 update-N1-openwrt.sh\n  ./update-N1-openwrt.sh Êñá‰ª∂Âêç.img\n\n[Ê≥®Ôºö‰∏âÂàÜÂå∫ÁâàÊú¨ÁöÑN1Âè™ËÉΩÂÜôÂÖ•Âõ∫‰ª∂Âà∞emmcÔºåÊó†Ê≥ïÁõ¥Êé•ÂçáÁ∫ßÂõ∫‰ª∂]" >> $GITHUB_ENV
          fi

      - name: Telegram Bot (pre-build notification)
        run: |
          cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c > CPU
          cat /proc/cpuinfo | grep "cpu cores" | uniq >> CPU
          sed -i 's|[[:space:]]||g; s|^.||' CPU && sed -i 's|CPU||g; s|pucores:||' CPU
          CPUNAME="$(awk 'NR==1' CPU)"
          CPUCORES="$(awk 'NR==2' CPU)"
          rm -rf CPU
          if [[ "${SERVERCHAN_SCKEY}" == "true" ]]; then
            curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=üéâ ‰∏ª‰∫∫ÔºöÊÇ®Ê≠£Âú®‰ΩøÁî®kissyouhunter‰ªìÂ∫ìÊâìÂåÖÁöÑÊú∫Âô®[ ${CPUNAME} Ê†∏ÂøÉÊï∞: ${CPUCORES} Á∫øÁ®ã: $(nproc) ]" https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage
          fi

      - name: Checkout
        uses: actions/checkout@v4

      - name: Installing Requirements & Cleaning Docker Images
        run: |
          docker rmi $(docker images -q) || true
          sudo -E apt-get update
          sudo -E apt-get install subversion -y
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean

      - name: Check Space Usage
        if: (!cancelled())
        run: df -hT

      - name: Download Openwrt_Packit
        id: packit
        run: |
          git clone "$REPO_URL" -b "$REPO_BRANCH" /tmp/packit
          sed -i 's|50000|25000|g' /tmp/packit/files/cpustat
          cd /tmp/packit
          curl -LO "$ROOTFS_URL"
          cp $GITHUB_WORKSPACE/mk_s905d_n1-docker.sh mk_s905d_n1-docker.sh -v
          cd /tmp/packit/files

      - name: Pack OpenWrt
        id: pack
        env:
          SET_54X: ${{ github.event.inputs.set_54x }}
          SET_510X: ${{ github.event.inputs.set_510x }}
          SET_515X: ${{ github.event.inputs.set_515x }}
          SET_61X: ${{ github.event.inputs.set_61x }}
          SET_66X: ${{ github.event.inputs.set_66x }}
        run: |
          declare -A kernels
          kernels=( ["set_54x"]="5.4" ["set_510x"]="5.10" ["set_515x"]="5.15" ["set_61x"]="6.1" ["set_66x"]="6.6" )
          for key in "${!kernels[@]}"; do
            var_name="SET_$(echo "${key#set_}" | tr '[:lower:]' '[:upper:]')"
            kernel_input=$(printenv "$var_name")
            kernel_ver="${kernels[$key]}"
            artifact_var="OP_${key#set_}"
            if [ "$kernel_input" = "none" ] || [ -z "$kernel_input" ]; then
              echo "no kernel was chosen for version ${kernel_ver}"
              echo "${artifact_var}=none" >> $GITHUB_ENV
            else
              echo "Processing kernel version ${kernel_input} for ${kernel_ver}"
              cd /tmp/packit
              curl -LO "$KERNEL_URL/${kernel_input}.tar.gz"
              tar -xzf "${kernel_input}.tar.gz"
              mv ./"${kernel_input}"/*kissyouhunter.tar.gz ./
              rm -rf "${kernel_input}.tar.gz" "${kernel_input}"
              rm -f make.env
              cp "$GITHUB_WORKSPACE/make_kernel.env" make.env -v
              sed -i 's|op-kissyouhunter|'${kernel_input}'-kissyouhunter|g' make.env
              sed -i 's|date|'${OP_DATE}'|g' make.env
              sudo bash mk_s905d_n1-docker.sh
              echo "${artifact_var}=openwrt_s905d_n1_R${OP_DATE}_k${kernel_input}-kissyouhunter.img.gz" >> $GITHUB_ENV
            fi
          done
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Organize Files
        id: organize
        if: steps.pack.outputs.status == 'success' && !cancelled()
        run: |
          cd /tmp/packit/output
          sudo gzip -9 *
          sudo chmod -R 777 .
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload Firmware Artifacts
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd "$FIRMWARE"
          for key in set_54x set_510x set_515x set_61x set_66x; do
            artifact_name_var="OP_${key#set_}"
            artifact_name=$(printenv "${artifact_name_var}")
            if [ "$artifact_name" != "none" ]; then
              echo "Uploading artifact: $artifact_name"
              sudo mkdir -p artifacts
              sudo chmod -R 777 artifacts
              cp "$artifact_name" artifacts/
            fi
          done

      - name: Artifact Upload
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        uses: actions/upload-artifact@master
        with:
          name: Firmware_Images
          path: ${{ env.FIRMWARE }}/*.gz

      - name: Upload Firmware to Release
        if: steps.organize.outputs.status == 'success' && env.RELEASE_FIRMWARE == 'true' && !cancelled()
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.REPO_TOKEN }}
          name: ${{ env.RELEASE_NAME }}
          tag: ${{ env.RELEASE_TAG }}
          commit: main
          allowUpdates: true
          repo: Openwrt_X86-Openwrt_N1-Armbian_N1
          body: ${{ env.RELEASE_BODY }}
          artifacts: ${{ env.FIRMWARE }}/*.gz

      - name: Setup Rclone
        uses: AnimMouse/setup-rclone@v1
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_RCLONE == 'true' && !cancelled()
        with:
          rclone_config: ${{ secrets.RCLONE_CONFIG }}

      - name: Upload to OneDrive
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_RCLONE == 'true' && !cancelled()
        run: |
          cd /tmp/packit/
          sudo chmod -R 777 .
          rclone -v move output kiss_blockads:onedrive/OPENWRT/N1_OP

      - name: Notify on failure
        if: ${{ failure() }}
        run: |
          curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=Êàë‰∫≤Áà±ÁöÑüò≠‰∏ª‰∫∫üò≠ÔºöÊÇ®‰ΩøÁî®kissyouhunter‰ªìÂ∫ìÊâìÂåÖÁöÑÂõ∫‰ª∂ÊûÑÂª∫Â§±Ë¥•ÔºåËØ∑Ê£ÄÊü•Êó•ÂøóÔºÅ" https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage

      - name: Telegram Bot (post-build notification)
        run: |
          if [[ "${SERVERCHAN_SCKEY}" == "true" ]]; then
            curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=Êàë‰∫≤Áà±ÁöÑ‚ú®‰∏ª‰∫∫‚ú®ÔºöÊâìÂåÖÂÆåÊàêÔºÅÂõ∫‰ª∂ÁâàÊú¨: ${OP_DATE} ÔºåËØ∑Êü•Êî∂ÊûÑÂª∫‰∫ßÁâ©" https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage
          fi
